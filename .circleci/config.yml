version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define a Docker executor: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # Be sure to update the Docker image tag below to openjdk version of your application.
    # A list of available CircleCI Docker Convenience Images are available here: https://circleci.com/developer/images/image/cimg/openjdk
    docker:
      - image: cimg/openjdk:11.0
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    working_directory: ~/e-procure
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: Generate cumulative pom.xml checksum
          command: |
            find . -type f -name "pom.xml" -exec sh -c "sha256sum {} >> ~/pom-checksum.tmp" \;
            sort -o ~/pom-checksum ~/pom-checksum.tmp
          when: always
      - restore_cache:
          keys:
            - e-procure-{{ checksum "~/pom-checksum" }}
            - e-procure-
      - run: mvn de.qaware.maven:go-offline-maven-plugin:resolve-dependencies
      - save_cache:
          paths:
            - ~/.m2
          key: e-procure-{{ checksum "~/pom-checksum" }}
      # Use mvn clean and package as the standard maven build phase
      - run:
          name: Build
          command: mvn clean package
      - run:
          name: Test
          command: mvn test
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          name: Uploading setups-service
          path: setups-service/target/setups-service-1.0.0.jar
      - store_artifacts:
          name: Uploading workflow-service
          path: workflow-service/target/workflow-service-1.0.0.jar
      - store_artifacts:
          name: Uploading employees-service
          path: employees-service/target/employees-service-1.0.0.jar
      - store_artifacts:
          name: Uploading configurations-service
          path: configuration-service/target/configurations-service-1.0.0.jar
      - store_artifacts:
          name: Uploading discovery-service
          path: discovery-service/target/discovery-service-1.0.0.jar
      - store_artifacts:
          name: Uploading gateway-service
          path: gateway-service/target/gateway-service-1.0.0.jar
workflows:
  Build and Test: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test
