@startuml
package "com.pgichure.eprocure.setups" #DDDDDD {

package com.pgichure.eprocure.setups.models{
class Country
{
Long id
--
String name
String code
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class Currency
{
Long id
--
String name
String code
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class ExchangeRate
{
Long id
--
DateTime effective_from_date
DateTime effective_to_date
Currency baseCurrency
Currency targetCurrency
Company company
BigDecimal rate
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class CompanyGroup
{
Long id
--
String name
String code
String uuid
Address addres
String tax_identification_number
String vat_number
Country country;
Currency currency
OpenStatus status
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class Company
{
Long id
--
CompanyGroup group
String name
String code
String uuid
Address address
String tax_identification_number
String vat_number
OpenStatus status
Country country
Currency currency
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class Department
{
Long id
--
String name
String code
String uuid
Company company
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class Designation
{
Long id
--
String name
String code
String uuid
Department department
User createdBy
User updatedBy
Date date_created
Date date_updated
}

class Address
{
Long id
--
String email
String mobile_phone_number
Country country
String zip_code
String city
String postal_address
String physical_address
String road
String building
String description
User createdBy
User updatedBy
Date date_created
Date date_updated
String contact_person
AddressType address_type
}


  }

package com.pgichure.eprocure.setups.enums{

enum OpenStatus
{
OPEN
CLOSED
UNKNOWN
}

enum AddressType
{
ORDINARY
EMERGENCY
}

}

package com.pgichure.eprocure.setups.dtos{
  class CountryDto
{
Long id
--
String name
String code
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class CurrencyDto
{
Long id
--
String name
String code
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class ExchangeRateDto
{
Long id
--
DateTime effective_from_date
DateTime effective_to_date
Currency baseCurrency
Currency targetCurrency
Company company
BigDecimal rate
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class CompanyGroupDto
{
Long id
--
String name
String code
String uuid
Long address_id
String tax_identification_number
String vat_number
Long country_id
Long currency_id
OpenStatus status
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class CompanyDto
{
Long id
--
Long group_id
String name
String code
String uuid
Long address_id
String tax_identification_number
String vat_number
OpenStatus status
Long country_id
Long currency_id
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class DepartmentDto
{
Long id
--
String name
String code
String uuid
Long company_id
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class DesignationDto
{
Long id
--
String name
String code
String uuid
String department_id
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
}

class AddressDto
{
Long id
--
String email
String mobile_phone_number
Country country
String zip_code
String city
String postal_address
String physical_address
String road
String building
String description
Long created_by_id
Long updated_by_id
Date date_created
Date date_updated
String contact_person
AddressType address_type
}

  }

 package com.pgichure.eprocure.setups.repositories{
 interface CountryRepository{
  }
interface CurrencyRepository{
  }

interface AddressRepository{
  }
interface ExchangeRateRepository{
  }
interface CompanyGroupRepository{
  }

interface CompanyRepository{
  }

interface DepartmentRepository{
  }

interface DesignationRepository{
  }
 }

 package com.pgichure.eprocure.setups.services{
interface CountryServiceI{
+save(CountryDto country)
+findById(Long countryId)
+update(Long countryId, CountryDto country)
+delete(Long countryId)
+List<CountryDto>()
  }
interface CurrencyServiceI{
+save(CurrencyDto currency)
+findById(Long currencyId)
+update(Long currencyId, CurrencyDto currency)
+delete(Long currencyId)
+List<CurrencyDto>()
  }

interface AddressServiceI{
  }
interface ExchangeRateServiceI{
  }
interface CompanyGroupServiceI{
  }

interface CompanyServiceI{
  }

interface DepartmentServiceI{
  }

interface DesignationServiceI{
  }

class CountryService{
  }
class CurrencyService{
  }

class AddressService{
  }
class ExchangeRateService{
  }
class CompanyGroupService{
  }

class CompanyService{
  }

class DepartmentService{
  }

class DesignationService{
  }

 }

package com.pgichure.eprocure.setups.controllers{
class CountryController{
  }
class CurrencyController{
  }

class AddressController{
  }
class ExchangeRateController{
  }
class CompanyGroupController{
  }

class CompanyController{
  }

class DepartmentController{
  }

class DesignationController{
  }

 }
}
com.pgichure.eprocure.setups +-- com.pgichure.eprocure.setups.dtos
com.pgichure.eprocure.setups +-- com.pgichure.eprocure.setups.enums
com.pgichure.eprocure.setups +-- com.pgichure.eprocure.setups.models
com.pgichure.eprocure.setups +-- com.pgichure.eprocure.setups.repositories
com.pgichure.eprocure.setups +-- com.pgichure.eprocure.setups.services
com.pgichure.eprocure.setups +-- com.pgichure.eprocure.setups.controllers
@enduml
